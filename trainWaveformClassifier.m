function model = trainWaveformClassifier(X, Y, modelType, hp)
% train a classifier for waveform data using GBM or SVM.

arguments
    X double
    Y
    modelType (1,1) string {mustBeMember(modelType,["gbmadaboost","gbmrusboost","svm"])}
    hp struct = struct()  % default empty struct
end

%  GBM hyperparameters
if ~isfield(hp, 'NumLearningCycles'), hp.NumLearningCycles = 100; end
if ~isfield(hp, 'LearnRate'),         hp.LearnRate         = 0.1;  end
if ~isfield(hp, 'MaxNumSplits'),      hp.MaxNumSplits      = 20;   end
if ~isfield(hp, 'MinLeafSize'),       hp.MinLeafSize       = 1;    end
if ~isfield(hp, 'SplitCriterion'),    hp.SplitCriterion    = 'gdi';end

% tree template for GBM
treeTemplate = templateTree( ...
    'MaxNumSplits',   hp.MaxNumSplits, ...
    'MinLeafSize',    hp.MinLeafSize,  ...
    'SplitCriterion', hp.SplitCriterion);

% SVM options and hyperparameters
if ~isfield(hp, 'UseParallel'),     hp.UseParallel     = false ; end
if ~isfield(hp, 'KernelFunction'),  hp.KernelFunction = 'rbf'; end
if ~isfield(hp, 'PolynomialOrder'), hp.PolynomialOrder = 3;   end
if ~isfield(hp, 'BoxConstraint'),   hp.BoxConstraint   = 1;   end
if ~isfield(hp, 'KernelScale'),     hp.KernelScale     = 'auto'; end
if ~isfield(hp, 'Solver'), hp.Solver = 'SMO'; end 
if ~isfield(hp, 'OutlierFraction'), hp.OutlierFraction = 0.1; end


classLabels = unique(Y);
numClasses  = numel(classLabels);

switch lower(modelType)

    case 'gbmadaboost'
        if numClasses > 2
            methodName = 'AdaBoostM2';
        else
            methodName = 'AdaBoostM1';
        end

        model = fitcensemble( ...
            X, Y, ...
            'Method',            methodName, ...
            'NumLearningCycles', hp.NumLearningCycles, ...
            'LearnRate',         hp.LearnRate, ...
            'Learners',          treeTemplate ...
            );

    case 'gbmrusboost'
        methodName = 'RUSBoost';
        model = fitcensemble( ...
            X, Y, ...
            'Method',            methodName, ...
            'NumLearningCycles', hp.NumLearningCycles, ...
            'LearnRate',         hp.LearnRate, ...
            'Learners',          treeTemplate ...
            );

    case 'svm'
        options = statset('UseParallel',hp.UseParallel);
        if strcmp(hp.KernelFunction,'polynomial')
            svmTemplate = templateSVM( ...
                'KernelFunction',  hp.KernelFunction, ...
                'PolynomialOrder', hp.PolynomialOrder, ...
                'BoxConstraint',   hp.BoxConstraint, ...
                'KernelScale',     hp.KernelScale, ...
                'Standardize',     true, ...                 
                'OutlierFraction', hp.OutlierFraction, ...
                'Solver',          hp.Solver...
                );

        elseif strcmp(hp.KernelFunction,'rbf')
            svmTemplate = templateSVM( ...
                'KernelFunction',  hp.KernelFunction, ...
                'BoxConstraint',   hp.BoxConstraint, ...
                'KernelScale',     hp.KernelScale, ...
                'Standardize',     true ...
                );

        end


        if numClasses > 2
            model = fitcecoc(X, Y, 'Learners', svmTemplate, 'Options',options);
        else
            if strcmp(hp.KernelFunction,'polynomial')
                model = fitcsvm( ...
                    X, Y, ...
                    'KernelFunction',  hp.KernelFunction, ...
                    'PolynomialOrder', hp.PolynomialOrder, ...
                    'BoxConstraint',   hp.BoxConstraint, ...
                    'KernelScale',     hp.KernelScale, ...
                    'Standardize',     true, ...
                    'KKTTolerance',    1e-3, ...
                    'OutlierFraction', hp.OutlierFraction, ...
                    'Solver',          hp.Solver...
                    );
            elseif strcmp(hp.KernelFunction,'rbf')
                model = fitcsvm( ...
                    X, Y, ...
                    'KernelFunction',  hp.KernelFunction, ...
                    'BoxConstraint',   hp.BoxConstraint, ...
                    'KernelScale',     hp.KernelScale, ...
                    'Standardize',     true ...
                    );
            end
        end

    otherwise
        error('Unsupported modelType. Choose gbmadaboost, gbmrusboost, or svm.');
end

end